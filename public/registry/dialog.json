{
  "name": "dialog",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-dialog",
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DialogContextValue {\n  innerOpen: boolean;\n  setInnerOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst DialogContext = React.createContext<DialogContextValue | undefined>(\n  undefined,\n);\n\nfunction Dialog({ children }: { children: React.ReactNode }) {\n  const [outerOpen, setOuterOpen] = React.useState(false);\n  const [innerOpen, setInnerOpen] = React.useState(false);\n\n  return (\n    <DialogContext.Provider value={{ innerOpen, setInnerOpen }}>\n      <DialogPrimitive.Root open={outerOpen} onOpenChange={setOuterOpen}>\n        {children}\n      </DialogPrimitive.Root>\n    </DialogContext.Provider>\n  );\n}\n\nconst DialogTrigger = DialogPrimitive.Trigger;\nconst DialogPortal = DialogPrimitive.Portal;\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/40 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => {\n  const context = React.useContext(DialogContext);\n  if (!context) throw new Error(\"DialogContent must be used within a Dialog\");\n\n  return (\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        ref={ref}\n        className={cn(\n          \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] rounded-lg border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n          context.innerOpen && \"translate-y-[-55%] scale-[0.97]\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <DialogClose className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Close</span>\n        </DialogClose>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n});\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nfunction InnerDialog({ children }: { children: React.ReactNode }) {\n  const context = React.useContext(DialogContext);\n  if (!context) throw new Error(\"InnerDialog must be used within a Dialog\");\n\n  React.useEffect(() => {\n    const handleEscapeKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\" && context.innerOpen) {\n        context.setInnerOpen(false);\n        event.stopPropagation();\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleEscapeKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", handleEscapeKeyDown);\n    };\n  }, [context.innerOpen, context.setInnerOpen]);\n\n  return (\n    <DialogPrimitive.Root\n      open={context.innerOpen}\n      onOpenChange={context.setInnerOpen}\n    >\n      {children}\n    </DialogPrimitive.Root>\n  );\n}\n\nconst InnerDialogTrigger = DialogPrimitive.Trigger;\nconst InnerDialogClose = DialogPrimitive.Close;\n\ninterface InnerDialogContentProps\n  extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> {\n  position?: \"default\" | \"bottom\" | \"top\" | \"left\" | \"right\";\n  draggable?: boolean;\n}\n\nconst InnerDialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  InnerDialogContentProps\n>(\n  (\n    { className, children, position = \"default\", draggable = false, ...props },\n    ref,\n  ) => {\n    const context = React.useContext(DialogContext);\n    if (!context)\n      throw new Error(\"InnerDialogContent must be used within a Dialog\");\n\n    const [isDragging, setIsDragging] = React.useState(false);\n    const [startY, setStartY] = React.useState(0);\n    const [currentY, setCurrentY] = React.useState(0);\n    const [isClosingByDrag, setIsClosingByDrag] = React.useState(false);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n      if (context.innerOpen) {\n        setCurrentY(0);\n        setIsClosingByDrag(false);\n      }\n    }, [context.innerOpen]);\n\n    const handlePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n      if (!draggable) return;\n      setIsDragging(true);\n      setStartY(e.clientY - currentY);\n      e.currentTarget.setPointerCapture(e.pointerId);\n    };\n\n    const handlePointerMove = (e: React.PointerEvent<HTMLDivElement>) => {\n      if (!isDragging || !draggable) return;\n      const newY = e.clientY - startY;\n      setCurrentY(newY > 0 ? newY : 0);\n    };\n\n    const handlePointerUp = () => {\n      if (!draggable) return;\n      setIsDragging(false);\n      if (currentY > (contentRef.current?.offsetHeight || 0) / 2) {\n        setIsClosingByDrag(true);\n        context.setInnerOpen(false);\n      } else {\n        setCurrentY(0);\n      }\n    };\n\n    return (\n      <DialogPortal>\n        <DialogPrimitive.Content\n          ref={ref}\n          onPointerDown={handlePointerDown}\n          onPointerMove={handlePointerMove}\n          onPointerUp={handlePointerUp}\n          style={{\n            transform: `translate(-50%, calc(-50% + ${currentY}px))`,\n            transition: isDragging ? \"none\" : \"transform 0.3s ease-out\",\n          }}\n          className={cn(\n            \"fixed left-[50%] top-[50%] z-[60] grid w-full max-w-lg translate-x-[-50%] translate-y-[-45%] gap-4 rounded-lg border bg-background p-6 shadow-lg duration-200\",\n            isClosingByDrag\n              ? \"data-[state=closed]:animate-none data-[state=closed]:fade-out-0\"\n              : \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]\",\n            position === \"default\" &&\n              \"data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]\",\n            position === \"bottom\" &&\n              \"data-[state=closed]:slide-out-to-bottom-[10%] data-[state=open]:slide-in-from-bottom-[10%]\",\n            position === \"top\" &&\n              \"data-[state=closed]:slide-out-to-top-full data-[state=open]:slide-in-from-top-full\",\n            position === \"left\" &&\n              \"data-[state=closed]:slide-out-to-left-full data-[state=open]:slide-in-from-left-full\",\n            position === \"right\" &&\n              \"data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-right-full\",\n            draggable && \"\",\n            className,\n          )}\n          {...props}\n        >\n          <div ref={contentRef}>{children}</div>\n          <InnerDialogClose className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n            <X className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Close</span>\n          </InnerDialogClose>\n        </DialogPrimitive.Content>\n      </DialogPortal>\n    );\n  },\n);\nInnerDialogContent.displayName = \"InnerDialogContent\";\n\nconst InnerDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className,\n    )}\n    {...props}\n  />\n);\nInnerDialogHeader.displayName = \"InnerDialogHeader\";\n\nconst InnerDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"flex flex-col-reverse sm:flex-row sm:space-x-2\", className)}\n    {...props}\n  />\n);\nInnerDialogFooter.displayName = \"InnerDialogFooter\";\n\nconst InnerDialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n));\nInnerDialogTitle.displayName = \"InnerDialogTitle\";\n\nconst InnerDialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nInnerDialogDescription.displayName = \"InnerDialogDescription\";\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className,\n    )}\n    {...props}\n  />\n);\nDialogHeader.displayName = \"DialogHeader\";\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"flex flex-col-reverse sm:flex-row sm:space-x-2\", className)}\n    {...props}\n  />\n);\nDialogFooter.displayName = \"DialogFooter\";\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport type { InnerDialogContentProps };\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  InnerDialog,\n  InnerDialogTrigger,\n  InnerDialogContent,\n  InnerDialogHeader,\n  InnerDialogFooter,\n  InnerDialogTitle,\n  InnerDialogDescription,\n  InnerDialogClose,\n  DialogPortal,\n  DialogOverlay,\n};\n",
      "path": "ui/dialog.tsx",
      "target": "components/ui/dialog.tsx"
    }
  ]
}